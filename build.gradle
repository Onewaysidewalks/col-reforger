plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

group 'ninja.onewaysidewalks.colreforger'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/net.sourceforge.tess4j/tess4j
    compile group: 'net.sourceforge.tess4j', name: 'tess4j', version: '4.5.3'


    // https://mvnrepository.com/artifact/net.java.dev.jna/jna
    compile group: 'net.java.dev.jna', name: 'jna', version: '5.2.0'
    compile group: 'net.java.dev.jna', name: 'jna-platform', version: '+'

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:+"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:+"
    compileOnly "org.projectlombok:lombok:1.18.6"

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

//Contribution Related Tasks
task runTest(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "ninja.onewaysidewalks.reforger.Main"
    setArgs(Arrays.asList("OCR-TEST"))
}

task reforge(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "ninja.onewaysidewalks.reforger.Main"
    setArgs(Arrays.asList("RUN"))
}

jar {
    manifest {
        attributes 'Main-Class': 'ninja.onewaysidewalks.reforger.Main'
    }
}

//Package related tasks
task shadow32(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    from sourceSets.main.output
    configurations = [project.configurations.runtime]
    manifest.attributes 'Main-Class': 'ninja.onewaysidewalks.reforger.Main'
    destinationDir = file("build/libs/32")
    archiveName = "colreforger32.jar"
}

task shadow64(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    from sourceSets.main.output
    archiveName = "colreforger64.jar"
    configurations = [project.configurations.runtime]
    manifest.attributes 'Main-Class': 'ninja.onewaysidewalks.reforger.Main'
    destinationDir = file("build/libs/64")
    zip64 = true
}

task packageFor32Release(type: Copy) {
    from "eng.traineddata"
    from "reforger.yaml"
    from "build/libs/32"
    from "ping.mp3"

    into "build/releases/32"

    doFirst {
        mkdir "build/releases/32/build"
    }
}

task packageFor64Release(type: Copy) {
    from "eng.traineddata"
    from "reforger.yaml"
    from "build/libs/64"
    from "ping.mp3"

    into "build/releases/64"

    doFirst {
        mkdir "build/releases/64/build"
    }
}

packageFor32Release.dependsOn(shadow32)
packageFor64Release.dependsOn(shadow64)

task packageForRelease {}
packageForRelease.dependsOn("packageFor32Release", "packageFor64Release")